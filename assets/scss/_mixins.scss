@mixin adaptiveProperty($propertyName, $deskSize, $mobSize) {
    $addSize: $deskSize - $mobSize;
    $addMobSize: $addSize + $addSize * 0.7;

    // Mobile size
    @media (max-width: numToPx($adaptivePropertyMinViewport)) {
        #{$propertyName}: numToRem($mobSize);
    }

    // Adaptive size between mobile and desktop
    @media (min-width: numToPx($adaptivePropertyMinViewport + 1)) and (max-width: numToPx($containerMaxWidth)) {
        #{$propertyName}: calc(
            #{numToRem($mobSize)} + 
            #{$addSize} * (
                (100vw - #{numToPx($adaptivePropertyMinViewport)}) / 
                (#{$adaptivePropertyMaxViewport} - $adaptivePropertyMinViewport)
            )
        );
    }

    // Desktop size
    @media (min-width: numToPx($adaptivePropertyMaxViewport + 1)) {
        #{$propertyName}: numToRem($deskSize);
    }
}

@mixin abs-img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;

    img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
}

@mixin fullWidthBeforeTablet {
    @media (max-width: $tabletLargeP1) {
        position: relative;
        left: -$containerPaddingS;
        width: 100vw;
    }

    @media (min-width: $mobileP1) and (max-width: $tabletLarge) {
        left: -$containerPaddingM;
    }
}

@mixin containerPaddingsBeforeTablet {
    box-sizing: border-box;

    @media (max-width: $mobile) {
        padding-right: $containerPaddingS;
        padding-left: $containerPaddingS;
    }

    @media (min-width: $mobileP1) and (max-width: $tabletLarge) {
        padding-right: $containerPaddingM;
        padding-left: $containerPaddingM;
    }
}

@mixin marginTop($desktopValue, $mobileValue) {
    margin-top: numToRem($mobileValue); // Move this above if it causes warnings

    @media (min-width: $tabletSmallP1) {
        margin-top: numToRem($desktopValue);
    }
}

@mixin marginBottom($desktopValue, $mobileValue, $hideLastMargin: false) {
    margin-bottom: numToRem($mobileValue); // Move this above if it causes warnings

    @media (min-width: $tabletSmallP1) {
        margin-bottom: numToRem($desktopValue);
    }

    @if ($hideLastMargin) {
        &:last-child {
            margin-bottom: 0;
        }
    }
}

@mixin blockLineStyles($paddingSizeX) {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    width: calc(100% - 0.8rem - #{$paddingSizeX} * 2);
    height: 0rem;
    border: 0.1rem solid $lineColor;
}

@mixin bottomCTASVGStyles($width, $height) {
    display: none;
    position: absolute;
    z-index: 1;
    color: $primary;
    top: 33%;
    transform: translateY(-50%);
    width: calc(100% - (100% - $width));
    @media (min-width: $tabletLargeP1) {
        display: block;
    }
    & > svg {
        aspect-ratio: $width/$height;
    }

    // [class]--hidden

    &--hidden {
        display: none
    }
}

@mixin buttonStyles() {
    position: relative;
    padding: 1rem 5rem;
    min-height: 4.4rem;
    border: 1px solid transparent;
    border-radius: 3rem;
    box-sizing: border-box;
    @include centerDiv();
    text-align: center;
    gap: 1rem;
    background-color: $primary;
    @include adaptiveProperty("font-size", 16, 14);
    line-height: 1.5;
    color: $white;
    font-weight: 700;
    white-space: nowrap;
    transition: 0.3s all;
    outline: none;
    cursor: pointer;


    img,svg {
        min-width: 1.7rem;
        max-width: 1.7rem;
        height: 1.8rem;
        position: relative;
        top: 0;
        transition: .3s all;
    }
    &:hover {
        opacity: 0.8;
    }
    span {
        @include centerDiv();
        gap: 1rem;
    }
}

@mixin windowButtonsStyles($top, $left) {
    position: absolute;
    top: $top;
    left: $left;
    width: 3.8rem;
    height: 0.8rem;
    gap: 0.619rem;

    &>span {
        width: 0.884rem;
        height: 0.8rem;
        border-radius: 10rem;

        &:nth-child(1) {
            background-color: $buttonYellow;
        }

        &:nth-child(2) {
            background-color: $buttonGreen;
            width: 0.795rem;
        }

        &:nth-child(3) {
            background-color: $buttonRed;
        }
    }
}

@mixin categoryButtonStyles() {
    @include buttonStyles();
    padding: 1rem 2rem;
    border-radius: 10rem;
}

@mixin squareDiv($sideLength) {
    width: $sideLength;
    height: $sideLength;
}

@mixin centerDiv() {
    display: flex;
    justify-content: center;
    align-items: center;
}

@mixin centerByPosition() {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translateX(-50%) translateY(-50%);
}

@mixin centerByVertical() {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
}

@mixin centerByHorizontal() {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
}

@mixin padTopPadBot($pt, $pb) {
    padding-top: $pt;
    padding-bottom: $pb;
}

@mixin pseudoInit($width: 0, $height: 0) {
    position: absolute;
    content: '';
    width: $width;
    height: $height;
}